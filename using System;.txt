using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

// Base class for questions
public abstract class Inquiry : ICloneable, IComparable<Inquiry>
{
    public string Title { get; set; }
    public string Content { get; set; }
    public float Score { get; set; }
    public int Identifier { get; set; }
    public string Complexity { get; set; }
    public List<Solution> Choices { get; set; } = new List<Solution>();

    public abstract void Display();

    public object Clone() => MemberwiseClone();

    public int CompareTo(Inquiry other)
    {
        if (other == null) return 1;
        int comparisonResult = Identifier.CompareTo(other.Identifier);
        return comparisonResult == 0 ? Complexity.CompareTo(other.Complexity) : comparisonResult;
    }

    public override string ToString() =>
        JsonSerializer.Serialize(this);
}

// Derived classes for specific question types
public class BinaryInquiry : Inquiry
{
    public bool AnswerValidity { get; set; }

    public override void Display()
    {
        Console.WriteLine($"{Title}: {Content} (True/False)");
    }
}

public class MultipleChoiceInquiry : Inquiry
{
    public List<string> Options { get; set; } = new List<string>();
    public int RightOptionIndex { get; set; }

    public override void Display()
    {
        Console.WriteLine($"{Title}: {Content}");
        for (int i = 0; i < Options.Count; i++)
        {
            Console.WriteLine($"{i + 1}. {Options[i]}");
        }
    }
}

// Answer class
public class Solution
{
    public int SolutionID { get; set; }
    public string Text { get; set; }
    public bool IsAccurate { get; set; }
}

// Base class for exams
public abstract class Test
{
    public int Duration { get; set; }
    public List<Inquiry> Problems { get; set; } = new List<Inquiry>();

    public abstract void Render();
}

// Derived classes for specific exam types
public class ComprehensiveTest : Test
{
    public override void Render()
    {
        Console.WriteLine("Final Exam:");
        foreach (var problem in Problems)
        {
            problem.Display();
        }
    }
}

public class HandsOnTest : Test
{
    public override void Render()
    {
        Console.WriteLine("Practical Exam:");
        foreach (var problem in Problems)
        {
            problem.Display();
        }
    }
}

// Subject class
public class Topic
{
    public int Code { get; set; }
    public string Name { get; set; }
    public Test AssignedTest { get; set; }

    public void AssignTest(Test test) => AssignedTest = test;
}

// Main program
public class EntryPoint
{
    public static void Main(string[] args)
    {
        Topic math = new Topic { Code = 101, Name = "Mathematics" };

        ComprehensiveTest mathTest = new ComprehensiveTest { Duration = 90 };
        mathTest.Problems.Add(new BinaryInquiry
        {
            Title = "Q1",
            Content = "The Earth is flat.",
            Score = 1,
            Identifier = 1,
            Complexity = "Easy",
            AnswerValidity = false
        });

        mathTest.Problems.Add(new MultipleChoiceInquiry
        {
            Title = "Q2",
            Content = "What is 10 + 5?",
            Score = 2,
            Identifier = 2,
            Complexity = "Medium",
            Options = new List<string> { "10", "15", "20" },
            RightOptionIndex = 1
        });

        math.AssignTest(mathTest);
        math.AssignedTest.Render();

        ExportToJson(mathTest, "test.json");
        Test loadedTest = ImportFromJson("test.json");
        Console.WriteLine("\nLoaded Test:");
        loadedTest.Render();
    }

    public static void ExportToJson(Test test, string filePath)
    {
        string serializedData = JsonSerializer.Serialize(test);
        File.WriteAllText(filePath, serializedData);
        Console.WriteLine($"Test saved to {filePath}");
    }

    public static Test ImportFromJson(string filePath)
    {
        string deserializedData = File.ReadAllText(filePath);
        return JsonSerializer.Deserialize<Test>(deserializedData);
    }
}
